'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Array manipulation base class
 * Created by Alexey S. Kiselev
 */

var ArrayManipulation = function () {
    function ArrayManipulation() {
        _classCallCheck(this, ArrayManipulation);
    }

    _createClass(ArrayManipulation, [{
        key: '_validateInput',

        /**
         * Validate input
         * @param input: any
         * @param allowObjects: boolean - allow objects checking
         * @private
         */
        value: function _validateInput(input) {
            var allowObjects = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

            if (typeof input === 'string' || Array.isArray(input)) {
                if (input.length === 0) {
                    throw new TypeError('Sample: input length must be greater then zero');
                }
            } else if ((typeof input === 'undefined' ? 'undefined' : _typeof(input)) === 'object' && allowObjects) {
                if (Object.keys(input).length === 0) {
                    throw new TypeError('Sample: input object must have at least one key');
                }
            } else if (allowObjects) {
                throw new TypeError('Sample: input must be array, string or object');
            } else throw new TypeError('Sample: input must be array or string');
        }
    }]);

    return ArrayManipulation;
}();

exports.default = ArrayManipulation;