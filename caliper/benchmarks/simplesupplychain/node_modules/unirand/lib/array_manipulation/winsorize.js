'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _base = require('./base');

var _base2 = _interopRequireDefault(_base);

var _percentiles2 = require('../analyzer/percentiles');

var _percentiles3 = _interopRequireDefault(_percentiles2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
/**
 * Winsorize method
 * https://en.wikipedia.org/wiki/Winsorizing
 * Created by Alexey S. Kiselev
 */

var Winsorize = function (_ArrayManipulation) {
    _inherits(Winsorize, _ArrayManipulation);

    function Winsorize() {
        _classCallCheck(this, Winsorize);

        return _possibleConstructorReturn(this, (Winsorize.__proto__ || Object.getPrototypeOf(Winsorize)).call(this));
    }

    _createClass(Winsorize, [{
        key: 'winsorize',
        value: function winsorize(input) {
            var limits = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0.05;
            var mutate = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;

            this._validateInput(input, false);
            this._percentile = new _percentiles3.default(input.slice());

            var _percentileLimits = this._parseLimits(limits),
                _percentiles = this._percentile.percentile(_percentileLimits),
                min_percentile_value = this._binarySearch(_percentiles[0]),
                max_percentile_value = this._binarySearch(_percentiles[1]);

            if (mutate === false) {
                input = input.slice();
            }

            // Change input array values
            for (var i = 0; i < input.length; i += 1) {
                if (input[i] < _percentiles[0]) {
                    input[i] = min_percentile_value;
                }
                if (input[i] > _percentiles[1]) {
                    input[i] = max_percentile_value;
                }
            }
            return input;
        }
    }, {
        key: '_parseLimits',
        value: function _parseLimits(limits) {
            if (typeof limits === 'number') {
                if (limits >= 0.5 || limits <= 0) {
                    throw new Error('Winsorize: limits should be less then 0.5 and greater then 0');
                }
                return [limits, 1 - limits];
            } else if (Array.isArray(limits)) {
                var limit1 = limits[0],
                    limit2 = limits[1];
                if (typeof limit1 !== 'number' || typeof limit2 !== 'number') {
                    throw new Error('Winsorize: should point limits as numbers');
                }
                if (limit1 <= 0 || limit1 >= 1 || limit2 <= limit1 || limit2 >= 1) {
                    throw new Error('Winsorize: You should point correct limits');
                }
                return [limit1, limit2];
            }
            return [0.05, 0.95];
        }

        /**
         * Binary search for elements less then lower percentile
         * and elements greater then upper percentile
         * @private
         */

    }, {
        key: '_binarySearch',
        value: function _binarySearch(value) {
            var start = 0,
                stop = this._percentile.randomArray.length - 1,
                middle = void 0;

            while (start <= stop) {
                middle = Math.floor((stop + start) / 2);
                if (value < this._percentile.randomArray[middle]) {
                    stop = middle - 1;
                } else if (value > this._percentile.randomArray[middle]) {
                    start = middle + 1;
                } else {
                    return this._percentile.randomArray[middle];
                }
            }
            return this._percentile.randomArray[start] - value < value - this._percentile.randomArray[stop] ? this._percentile.randomArray[start] : this._percentile.randomArray[stop];
        }
    }]);

    return Winsorize;
}(_base2.default);

exports.default = Winsorize;