'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _base = require('./base');

var _base2 = _interopRequireDefault(_base);

var _prngProxy = require('../prng/prngProxy');

var _prngProxy2 = _interopRequireDefault(_prngProxy);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
/**
 * Arrays and strings shuffle method
 * Get random permutation of array
 * Simple permutation by default
 * Created by Alexey S. Kiselev
 */

var Shuffle = function (_ArrayManipulation) {
    _inherits(Shuffle, _ArrayManipulation);

    function Shuffle() {
        _classCallCheck(this, Shuffle);

        // Calculate derange branches
        var _this = _possibleConstructorReturn(this, (Shuffle.__proto__ || Object.getPrototypeOf(Shuffle)).call(this));

        _this._derangeBranches = _this._calculateDerangeBranches();
        return _this;
    }

    _createClass(Shuffle, [{
        key: 'getPermutation',
        value: function getPermutation(input) {
            var result = [];
            this._validateInput(input, false);

            // Check input length
            if (input.length === 1) {
                return input;
            }

            // For performance purposes I am going to separate permutation methods for different types
            if (typeof input === 'string') {
                result = this._getSimplePermutationForString(input);
            } else if (Array.isArray(input)) {
                result = this._getSimplePermutationForArray(input);
            }

            return result;
        }

        /**
         * Derange method
         * https://en.wikipedia.org/wiki/Derangement
         * @param input: any
         */

    }, {
        key: 'getDerangement',
        value: function getDerangement(input) {
            var result = [];
            this._validateInput(input, false);

            // Check input length
            if (input.length === 1) {
                return input;
            }

            // For performance purposes I am going to separate permutation methods for different types
            if (typeof input === 'string') {
                result = this._getDerangementForString(input);
            } else if (Array.isArray(input)) {
                result = this._getDerangementForArray(input);
            }

            return result;
        }

        /**
         * Get simple permutation for arrays
         * Fisher-Yates Shuffle algorithm
         * @param input: RandomArrayNumberString<number | string>
         * @returns RandomArrayNumberString
         * @private
         */

    }, {
        key: '_getSimplePermutationForArray',
        value: function _getSimplePermutationForArray(input) {
            var currentIndex = input.length,
                randomIndex = void 0;
            _prngProxy2.default.random();
            while (currentIndex !== 0) {
                randomIndex = Math.floor(_prngProxy2.default.next() * currentIndex);
                currentIndex -= 1;

                // $FlowFixMe - Destructuring swap is faster
                var _ref = [input[randomIndex], input[currentIndex]];
                input[currentIndex] = _ref[0];
                input[randomIndex] = _ref[1];
            }

            return input;
        }

        /**
         * Get simple permutation for strings
         * @param input: string
         * @returns string
         * @private
         */

    }, {
        key: '_getSimplePermutationForString',
        value: function _getSimplePermutationForString(input) {
            return this._getSimplePermutationForArray(input.split('')).join('');
        }

        /**
         * Get derangement for arrays
         * @param input: RandomArrayNumberString<T>
         * @returns RandomArrayNumberString<T>
         * @private
         */

    }, {
        key: '_getDerangementForArray',
        value: function _getDerangementForArray(input) {
            var indexes = [],
                n = input.length,
                // input length
            ni = n,
                // number of elements in indexes array
            r1 = void 0,
                x2 = void 0,
                r2 = void 0,
                rat = void 0,
                t = void 0;

            _prngProxy2.default.random();

            // Initialize indexes array
            for (var i = 0; i < input.length; i += 1) {
                indexes[i] = i;
            }

            while (ni >= 2) {
                r1 = indexes[ni - 1];
                x2 = Math.floor(_prngProxy2.default.next() * (ni - 1));
                r2 = indexes[x2];

                // $FlowFixMe - Destructuring swap is faster
                var _ref2 = [input[r2], input[r1]];
                input[r1] = _ref2[0];
                input[r2] = _ref2[1];

                ni -= 1;
                rat = ni <= 32 ? this._derangeBranches[ni] : 1 / ni;
                t = _prngProxy2.default.next();

                if (t < rat) {
                    ni -= 1;
                    // $FlowFixMe - Destructuring swap is faster
                    var _ref3 = [indexes[ni], indexes[x2]];
                    indexes[x2] = _ref3[0];
                    indexes[ni] = _ref3[1];
                }
            }
            return input;
        }

        /**
         * Get derangement for strings
         * @param input: string
         * @returns string
         * @private
         */

    }, {
        key: '_getDerangementForString',
        value: function _getDerangementForString(input) {
            return this._getDerangementForArray(input.split('')).join('');
        }

        /**
         * Calculate derange branches probabilities for small n for derangement
         * @returns {Array<number>}
         * @private
         */

    }, {
        key: '_calculateDerangeBranches',
        value: function _calculateDerangeBranches() {
            var result = [0, 1],
                Dn0 = 1,
                Dn1 = 0,
                n1 = 1,
                Dn2 = void 0;
            for (var i = 3; i <= 32; i += 1) {
                Dn2 = Dn1;
                Dn1 = 1;
                n1 += 1;
                Dn0 = n1 * (Dn1 + Dn2);
                Dn1 /= Dn0;
                Dn2 /= Dn0;
                result[i - 1] = n1 * Dn2;
            }
            return result;
        }
    }]);

    return Shuffle;
}(_base2.default);

exports.default = Shuffle;