'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
/**
 * Created by Alexey S. Kiselev
 */

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _distributionFactory = require('./distributionFactory');

var _distributionFactory2 = _interopRequireDefault(_distributionFactory);

var _analyzerFactory = require('./analyzerFactory');

var _analyzerFactory2 = _interopRequireDefault(_analyzerFactory);

var _sample = require('./array_manipulation/sample');

var _sample2 = _interopRequireDefault(_sample);

var _shuffle = require('./array_manipulation/shuffle');

var _shuffle2 = _interopRequireDefault(_shuffle);

var _winsorize2 = require('./array_manipulation/winsorize');

var _winsorize3 = _interopRequireDefault(_winsorize2);

var _hash = require('./utils/hash');

var _hash2 = _interopRequireDefault(_hash);

var _prngProxy = require('./prng/prngProxy');

var _prngProxy2 = _interopRequireDefault(_prngProxy);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Bernoulli = require('./methods/bernoulli');

var RandomJS = function () {
    function RandomJS() {
        var _this = this;

        _classCallCheck(this, RandomJS);

        this.analyze = null;
        this.utils = null;
        this._sample = new _sample2.default();
        this._shuffle = new _shuffle2.default();
        this._prng = _prngProxy2.default; // default PRNG with seed
        this._distribution_factory = new _distributionFactory2.default();

        _fs2.default.readdirSync(__dirname + '/methods').forEach(function (file) {
            /**
             *  Add a "random" method which contains different distribution methods
             *  Uses a factory pattern for creating instances of distributions classes
             *  @returns Object corresponds to distribution
             */
            Object.defineProperty(_this, file.slice(0, -3), {
                __proto__: null,
                get: function get() {
                    return function () {
                        var _distribution_factory;

                        for (var _len = arguments.length, params = Array(_len), _key = 0; _key < _len; _key++) {
                            params[_key] = arguments[_key];
                        }

                        (_distribution_factory = _this._distribution_factory).set_current_generator.apply(_distribution_factory, [file].concat(params));
                        return _this._distribution_factory;
                    };
                }
            });
        });

        /**
         * Add random array analyser
         * This method is long in constructor and short in methods
         * TODO: implement method short in constructor and long in methods
         * Use Analyzer factory to create method
         */
        Object.defineProperty(this, 'analyze', {
            __proto__: null,
            value: function value(randomArray, options) {
                return new _analyzerFactory2.default(randomArray, options);
            }
        });

        /**
         * Utils
         * Contains implementation for Gamma, Digamma functions, etc.
         */
        Object.defineProperty(this, 'utils', {
            __proto__: null,
            value: require(__dirname + '/utils/utils')
        });

        /**
         * Random sample (k random elements from array with N elements 0 < k <= N)
         */
        Object.defineProperty(this, 'sample', {
            __proto__: null,
            value: function value(input, k, options) {
                var defaultOptions = {
                    shuffle: false
                };
                if ((typeof k === 'undefined' ? 'undefined' : _typeof(k)) === 'object' || typeof k === 'undefined') {
                    // assume that k is undefined, and the second parameter is options
                    return _this._sample.getSample(input, undefined, Object.assign(defaultOptions, k));
                } else {
                    return _this._sample.getSample(input, k, Object.assign(defaultOptions, options));
                }
            }
        });

        /**
         * Simple shuffle method
         */
        Object.defineProperty(this, 'shuffle', {
            __proto__: null,
            value: function value(input) {
                return _this._shuffle.getPermutation(input);
            }
        });

        /**
         * Derange method
         */
        Object.defineProperty(this, 'derange', {
            __proto__: null,
            value: function value(input) {
                return _this._shuffle.getDerangement(input);
            }
        });

        /**
         * Chance - returns true with given probability
         */
        Object.defineProperty(this, 'chance', {
            __proto__: null,
            value: function value(trueProb) {
                var _chance = new Bernoulli(trueProb);
                if (_chance.isError().error) {
                    throw new Error(_chance.isError().error);
                }
                return !!_chance.random();
            }
        });

        /**
         * Winsorize method
         */
        Object.defineProperty(this, 'winsorize', {
            __proto__: null,
            value: function value(input) {
                var limits = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0.05;
                var mutate = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;

                var _winsorize = new _winsorize3.default();
                return _winsorize.winsorize(input, limits, mutate);
            }
        });

        /**
         * Hash function
         */
        Object.defineProperty(this, 'hash', {
            __proto__: null,
            value: function value(data, seed) {
                return (0, _hash2.default)(data, seed);
            }
        });

        /**
         * PRNG seed
         */
        Object.defineProperty(this, 'seed', {
            __proto__: null,
            value: function value(seed_value) {
                _this._prng.seed(seed_value);
            }
        });

        /**
         * Sets PRNG
         */
        Object.defineProperty(this, 'prng', {
            __proto__: null,
            get: function get() {
                return _this._prng;
            }
        });

        /**
         * Returns seeded random value [0, 1) with uniform distribution
         */
        Object.defineProperty(this, 'random', {
            value: function value() {
                var n = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;

                return _this._prng.random(n);
            }
        });

        /**
         * Returns seeded next value [0, 1) with uniform distribution
         */
        Object.defineProperty(this, 'next', {
            value: function value() {
                return _this._prng.next();
            }
        });

        /**
         * Returns seeded random integer value [0, 2^32) with uniform distribution
         */
        Object.defineProperty(this, 'randomInt', {
            value: function value() {
                var n = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;

                return _this._prng.randomInt(n);
            }
        });

        /**
         * Returns seeded next integer value [0, 2^32) with uniform distribution
         */
        Object.defineProperty(this, 'nextInt', {
            value: function value() {
                return _this._prng.nextInt();
            }
        });
    }

    _createClass(RandomJS, [{
        key: 'help',
        value: function help() {
            var help = require('./help');
            console.log('Available Distribution methods:');
            Object.keys(help).forEach(function (method) {
                console.log(method + ': ' + help[method]);
            });
        }
    }]);

    return RandomJS;
}();

// Add methods extractor


var randomjs = new RandomJS();
var methods = {
    analyze: randomjs.analyze,
    utils: randomjs.utils,
    sample: randomjs.sample,
    shuffle: randomjs.shuffle,
    derange: randomjs.derange,
    chance: randomjs.chance,
    winsorize: randomjs.winsorize,
    hash: randomjs.hash,
    seed: randomjs.seed,
    prng: randomjs.prng,
    random: randomjs.random,
    next: randomjs.next
};
_fs2.default.readdirSync(__dirname + '/methods').forEach(function (file) {
    var rand_method = file.slice(0, -3);
    methods[rand_method] = Object.getOwnPropertyDescriptor(randomjs, rand_method).get();
});

module.exports = methods;

// TODO: Create a check-values external function
// TODO: Generators
// TODO: Regression
// TODO: Prediction
// TODO: Games
// TODO: add Proxy to random generators
// TODO: add F-distribution
// TODO: add zipf distribution
// TODO: add utils