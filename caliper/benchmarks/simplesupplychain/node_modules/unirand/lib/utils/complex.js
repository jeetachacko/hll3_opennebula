'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Library for working with complex numbers
 * Created by Alexey S. Kiselev
 */

var Complex = function () {

    /**
     * Constructor
     * @param complexNumber - number (like standard number),
     *                        string (like '1 + 2i' or '2 + i3')
     *                        object (like {real: 1, imag: 2})
     *                        array (like [1<real>, 2<imag>]
     * @param imag
     */

    /**
     * Real part of complex number
     * <number>
     */
    function Complex(complexNumber, imag) {
        _classCallCheck(this, Complex);

        var typeOfInput = typeof complexNumber === 'undefined' ? 'undefined' : _typeof(complexNumber);

        if (typeOfInput === 'number') {
            // Standard number
            this.real = Number(complexNumber);
            this.imag = Number(imag) || 0;
        } else if (Array.isArray(complexNumber)) {
            // Array input
            this.real = Number(complexNumber[0]) || 0;
            this.imag = Number(complexNumber[1]) || 0;
        } else if (typeOfInput === 'object') {
            // Object notation
            this.real = Number(complexNumber.real) || 0;
            this.imag = imag ? Number(imag) : Number(complexNumber.imag) || 0;
        } else {
            // String notation
            this._parseComplex(complexNumber, String(imag));
        }
    }

    /**
     * Parsing of complex number in string notation
     * Inputs: a + ib, a + bi
     */


    /**
     * Imagine part of complex number
     * <number>
     */


    _createClass(Complex, [{
        key: '_parseComplex',
        value: function _parseComplex(complexNumber) {
            var imag = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';

            var complex = complexNumber.match(/\s*(?:(\d*)?\s*\+)?\s*(?:i\s*(\d*)|(\d*)\s*i)?\s*/g);
            console.log(complex);
        }
    }, {
        key: 'add',
        value: function add() {}
    }]);

    return Complex;
}();

module.exports = Complex;