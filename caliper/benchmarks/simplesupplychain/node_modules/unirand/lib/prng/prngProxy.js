'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
/**
 * PRNG proxy
 * Creates PRN generators or Math.random by default
 */

var _BasicPRNG = require('./BasicPRNG');

var _BasicPRNG2 = _interopRequireDefault(_BasicPRNG);

var _TucheiPRNG = require('./TucheiPRNG');

var _TucheiPRNG2 = _interopRequireDefault(_TucheiPRNG);

var _DefaultPRNG = require('./DefaultPRNG');

var _DefaultPRNG2 = _interopRequireDefault(_DefaultPRNG);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var DEFAULT_GENERATOR = 'tuchei';

var PRNGProxy = function () {
    function PRNGProxy() {
        _classCallCheck(this, PRNGProxy);

        this._modulo = _BasicPRNG2.default.modulo;
        this._seed = undefined;
        this._allowed_generators = {
            'default': _DefaultPRNG2.default,
            'tuchei': _TucheiPRNG2.default
        };

        this._generators = {
            'default': new _DefaultPRNG2.default()
        };

        this._current_generator_name = 'default';
        this._current_generator = this._generators['default'];
    }

    /**
     * A list of allowed generators
     * @returns {Array<string>} a list of generators
     */


    _createClass(PRNGProxy, [{
        key: 'random',


        /**
         * Random method
         * @returns random number in range [0, 1)
         */
        value: function random() {
            var n = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;

            return this._current_generator.random(n);
        }

        /**
         * Next method
         * @returns {number} only single random value
         */

    }, {
        key: 'next',
        value: function next() {
            return this._current_generator.next();
        }
    }, {
        key: 'nextInt',
        value: function nextInt() {
            return this._current_generator.nextInt();
        }

        /**
         * Returns random integer [0, 2^32)
         * @returns {number}
         */

    }, {
        key: 'randomInt',
        value: function randomInt() {
            var n = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;

            return this._current_generator.randomInt(n);
        }

        /**
         * Seed for reproducible results
         * If seed does not passed - assign random seed
         * @param {NumberString} seed_value
         */

    }, {
        key: 'seed',
        value: function seed(seed_value) {
            if (typeof seed_value === 'number' && seed_value < 0) {
                seed_value += this._modulo - 1;
            }
            this._seed = seed_value;
            this._current_generator.seed(this._seed);
        }

        /**
         * Sets PRNG generator
         * @param {string} prng_name: name of generator on initialization
         */

    }, {
        key: 'set_prng',
        value: function set_prng() {
            var prng_name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'default';

            if (this._allowed_generators[prng_name]) {
                if (!this._generators[prng_name]) {
                    this._generators[prng_name] = new this._allowed_generators[prng_name]();
                }
                this._current_generator_name = prng_name;
                this._current_generator = this._generators[prng_name];
                this._current_generator.seed(this._seed);
            }
        }
    }, {
        key: 'prng_name',


        /**
         * Current PRNG name
         * @returns {string} name of current PRNG
         */
        get: function get() {
            return this._current_generator_name;
        }
    }], [{
        key: 'generators',
        get: function get() {
            return ['default', 'tychei'];
        }
    }]);

    return PRNGProxy;
}();

var prng_proxy = new PRNGProxy();

var prng = function prng() {
    var prng_name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'default';

    prng_proxy.set_prng(prng_name);
    return prng_proxy;
};

exports.default = prng(DEFAULT_GENERATOR);