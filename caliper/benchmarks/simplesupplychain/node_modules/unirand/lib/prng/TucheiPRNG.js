'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _BasicPRNG2 = require('./BasicPRNG');

var _BasicPRNG3 = _interopRequireDefault(_BasicPRNG2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
/**
 * Tuchei PRNG
 */


var TucheiPRNG = function (_BasicPRNG) {
    _inherits(TucheiPRNG, _BasicPRNG);

    // state after setting seed

    function TucheiPRNG() {
        _classCallCheck(this, TucheiPRNG);

        var _this = _possibleConstructorReturn(this, (TucheiPRNG.__proto__ || Object.getPrototypeOf(TucheiPRNG)).call(this));

        _this._no_seed = true;
        _this._state = {};
        _this._initialize();
        return _this;
    }

    /**
     * Initializes initial values and sets state for calculating random number
     * @private
     */


    _createClass(TucheiPRNG, [{
        key: '_initialize',
        value: function _initialize() {
            this._a = 0;
            this._b = 0;
            this._c = 0x7FFFFFFF | 0;
            this._d = 0x517CC1B7;
        }

        /**
         * Sets state for random number generating
         * @param {number} a
         * @param {number} b
         * @param {number} c
         * @param {number} d
         * @private
         */

    }, {
        key: '_setState',
        value: function _setState(a, b, c, d) {
            this._state._a = a;
            this._state._b = b;
            this._state._c = c;
            this._state._d = d;
        }

        /**
         * Gets values from state
         * @private
         */

    }, {
        key: '_get_from_state',
        value: function _get_from_state() {
            this._a = this._state._a;
            this._b = this._state._b;
            this._c = this._state._c;
            this._d = this._state._d;
        }

        /**
         * Creates random seed
         * @private
         */

    }, {
        key: '_set_random_seed',
        value: function _set_random_seed() {
            this._seed = _BasicPRNG3.default.random_seed();
            this._a = this._seed / 0x100000000 | 0;
            this._b = this._seed | 0;
        }

        /**
         * Prepare intial values for calculating random value
         * @private
         */

    }, {
        key: '_prepare_initial',
        value: function _prepare_initial() {
            if (this._no_seed === true) {
                this._initialize();
                this._set_random_seed();
            } else {
                this._get_from_state();
            }
        }
    }, {
        key: 'random',
        value: function random() {
            var n = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;

            this._prepare_initial();

            if (typeof n !== 'number') {
                return this.next();
            }

            if (n <= 1) {
                return this.next();
            }

            var random_array = [];
            for (var i = 0; i < n; i += 1) {
                random_array[i] = this.next();
            }

            return random_array;
        }
    }, {
        key: 'next',
        value: function next() {
            return (this.nextInt() >>> 0) / 0x100000000;
        }
    }, {
        key: 'randomInt',
        value: function randomInt() {
            var n = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;

            this._prepare_initial();

            if (typeof n !== 'number') {
                return this.nextInt();
            }

            if (n <= 1) {
                return this.nextInt();
            }

            var random_array = [];
            for (var i = 0; i < n; i += 1) {
                random_array[i] = this.nextInt();
            }

            return random_array;
        }
    }, {
        key: 'seed',
        value: function seed(seed_value) {
            this._initialize();
            if (seed_value === undefined || seed_value === null) {
                this._no_seed = true;
            } else if (typeof seed_value === 'number') {
                this._seed = Math.floor(seed_value);
                this._a = this._seed / 0x100000000 | 0;
                this._b = this._seed | 0;
                this._setState(this._a, this._b, this._c, this._d);
                this._no_seed = false;
            } else if (typeof seed_value === 'string') {
                this._seed = seed_value;
                for (var i = 0; i < this._seed.length + 20; i += 1) {
                    this._b ^= this._seed.charCodeAt(i) | 0;
                    this.next();
                }
                this._setState(this._a, this._b, this._c, this._d);
                this._no_seed = false;
            } else {
                this._no_seed = true;
                throw new Error('You should point seed with types: "undefined", "number" or "string"');
            }
        }
    }, {
        key: 'nextInt',
        value: function nextInt() {
            var a = this._a,
                b = this._b,
                c = this._c,
                d = this._d;

            b = b << 25 ^ b >>> 7 ^ c;
            c = c - d | 0;
            d = d << 24 ^ d >>> 8 ^ a;
            a = a - b | 0;
            this._b = b = b << 20 ^ b >>> 12 ^ c;
            this._c = c = c - d | 0;
            this._d = d << 16 ^ c >>> 16 ^ a;
            return this._a = a - b | 0;
        }
    }]);

    return TucheiPRNG;
}(_BasicPRNG3.default);

exports.default = TucheiPRNG;