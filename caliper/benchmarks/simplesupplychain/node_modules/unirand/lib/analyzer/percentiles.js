'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _desc, _value, _class2;

var _decorators = require('../decorators');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
    var desc = {};
    Object['ke' + 'ys'](descriptor).forEach(function (key) {
        desc[key] = descriptor[key];
    });
    desc.enumerable = !!desc.enumerable;
    desc.configurable = !!desc.configurable;

    if ('value' in desc || desc.initializer) {
        desc.writable = true;
    }

    desc = decorators.slice().reverse().reduce(function (desc, decorator) {
        return decorator(target, property, desc) || desc;
    }, desc);

    if (context && desc.initializer !== void 0) {
        desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
        desc.initializer = undefined;
    }

    if (desc.initializer === void 0) {
        Object['define' + 'Property'](target, property, desc);
        desc = null;
    }

    return desc;
}

/**
 * Common analyzer's methods
 * This class contains max, min, mean, median, mode, entropy, variance ... methods
 * Created by Alexey S. Kiselev
 */

var Percentiles = (0, _decorators.AnalyzerSingleton)(_class = (_class2 = function () {
    function Percentiles(randomArray) {
        _classCallCheck(this, Percentiles);

        this.randomArray = randomArray.sort(function (a, b) {
            return a - b;
        });
    }

    /**
     * Calculate particular percentile
     * @returns {number} or {undefined} in case of impossible percentile
     * @private
     */

    /**
     * Main input Array
     */


    _createClass(Percentiles, [{
        key: '_calculate_percentile',
        value: function _calculate_percentile(value) {
            if (value < 0 || value > 1 || typeof value !== 'number') {
                return undefined;
            }
            if (value === 0 || value === 1) {
                return this.randomArray[(this.randomArray.length - 1) * value];
            }
            var percentile_index = Math.floor(this.randomArray.length * value) - 1;
            if (percentile_index < 0) {
                return undefined;
            }
            if (this.randomArray.length % 2 === 0) {
                return this.randomArray[percentile_index] + (1 - value) * (this.randomArray[percentile_index + 1] - this.randomArray[percentile_index]);
            }
            return this.randomArray[percentile_index + 1];
        }

        /**
         * Quartiles - 25%, 50% (median), 75%
         * @returns {{q1: number, q2: number, q3: number}}
         */

    }, {
        key: 'percentile',
        value: function percentile(value) {
            if (typeof value === 'number') {
                return this._calculate_percentile(value);
            } else if (Array.isArray(value)) {
                var percentile_array = [];
                for (var i = 0; i < value.length; i += 1) {
                    percentile_array[i] = this._calculate_percentile(value[i]);
                }
                return percentile_array;
            }
            throw new Error('Analyzer: input must be a number or an Array of numbers');
        }

        /**
         * Public method for analyzer
         * @returns {number} - Interquartile range
         */

    }, {
        key: 'quartiles',
        get: function get() {
            return {
                'q1': this._calculate_percentile(0.25),
                'q2': this._calculate_percentile(0.5),
                'q3': this._calculate_percentile(0.75)
            };
        }

        /**
         * Median value - 50% Quartile
         * @returns {number}
         */

    }, {
        key: 'median',
        get: function get() {
            return this._calculate_percentile(0.5);
        }

        /**
         * Percentiles
         * Keep correct order for percentiles
         * @returns number or list of value depends on input
         */

    }, {
        key: 'interquartile_range',
        get: function get() {
            var q1 = this._calculate_percentile(0.25),
                q3 = this._calculate_percentile(0.75);
            if (typeof q1 !== 'undefined' && typeof q3 !== 'undefined') {
                // $FlowFixMe
                return q3 - q1;
            }
            return undefined;
        }
    }]);

    return Percentiles;
}(), (_applyDecoratedDescriptor(_class2.prototype, 'quartiles', [_decorators.AnalyzerPublicMethod], Object.getOwnPropertyDescriptor(_class2.prototype, 'quartiles'), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, 'median', [_decorators.AnalyzerPublicMethod], Object.getOwnPropertyDescriptor(_class2.prototype, 'median'), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, 'percentile', [_decorators.AnalyzerPublicFunction], Object.getOwnPropertyDescriptor(_class2.prototype, 'percentile'), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, 'interquartile_range', [_decorators.AnalyzerPublicMethod], Object.getOwnPropertyDescriptor(_class2.prototype, 'interquartile_range'), _class2.prototype)), _class2)) || _class;

module.exports = Percentiles;