'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.AnalyzerSingleton = exports.AnalyzerPublicFunction = exports.AnalyzerPublicMethod = undefined;

var _interfaces = require('./interfaces');

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }
/**
 * Decorators for different purposes
 * Created by Alexey S. Kiselev
 */

/**
 * Decorator for making method public for AnalyzerFactory
 * I this decorator I am going to check publicMethods property
 * If this object does not exist - create empty object
 * Then add name of public method to this object via propertyKey value
 * In class add @PublicMethod string before every public method
 */
var AnalyzerPublicMethod = exports.AnalyzerPublicMethod = function AnalyzerPublicMethod(Target, propertyKey) {
    if (!Target.constructor.publicMethods) {
        Target.constructor.publicMethods = {};
    }
    Target.constructor.publicMethods[propertyKey] = 1;
};

var AnalyzerPublicFunction = exports.AnalyzerPublicFunction = function AnalyzerPublicFunction(Target, propertyKey) {
    if (!Target.constructor.publicFunctions) {
        Target.constructor.publicFunctions = {};
    }
    Target.constructor.publicFunctions[propertyKey] = 1;
};

var AnalyzerSingleton = exports.AnalyzerSingleton = function AnalyzerSingleton(Target) {
    /**
     * Create instance object initially assigned to null
     */
    Target._instance = null;

    /**
     * Add static method getInstance to target
     * Instead of using "new" keyword I use getInstance method
     */
    Object.assign(Target, {
        getInstance: function getInstance() {
            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                args[_key] = arguments[_key];
            }

            /**
             * If instance haven't created - create it with arguments
             * If instance created - update params via calling constructor without creating new object
             * In total returns instance
             */
            if (!Target._instance) {
                Target._instance = new (Function.prototype.bind.apply(Target, [null].concat(_toConsumableArray(args))))();
            } else {
                Target._instance.constructor.apply(Target._instance, args);
            }

            return Target._instance;
        }
    });
};