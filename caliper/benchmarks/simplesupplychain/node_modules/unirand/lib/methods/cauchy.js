'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

/**
 * Cauchy Distribution (also called Lorenz distribution)
 * This is continuous distribution
 * https://en.wikipedia.org/wiki/Cauchy_distribution
 * @param x: number - location any number
 * @param gamma: number - scale positive number
 * @returns a Cauchy Distributed number
 * Created by Alexey S. Kiselev
 */

var _prngProxy = require('../prng/prngProxy');

var _prngProxy2 = _interopRequireDefault(_prngProxy);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var TAN_LIMIT = 12;

var Cauchy = function () {
    function Cauchy(x, gamma) {
        _classCallCheck(this, Cauchy);

        this.location = Number(x);
        this.scale = Number(gamma);
    }

    /**
     * Generates a random number
     * So, Math.tan can be huge, and it make analysis very hard (because value can be Infinity)
     * I am going to limit values by 12gamma
     * I implement recursive approach
     * @returns a normal distributed number
     */


    _createClass(Cauchy, [{
        key: 'random',
        value: function random() {
            var randomTan = Math.tan(Math.PI * (_prngProxy2.default.random() - 0.5));
            while (Math.abs(randomTan) > TAN_LIMIT) {
                randomTan = Math.tan(Math.PI * (_prngProxy2.default.next() - 0.5));
            }
            return this.location + this.scale * randomTan;
        }

        /**
         * Generates next seeded random number
         * @returns {number}
         */

    }, {
        key: 'next',
        value: function next() {
            var randomTan = Math.tan(Math.PI * (_prngProxy2.default.next() - 0.5));
            while (Math.abs(randomTan) > TAN_LIMIT) {
                randomTan = Math.tan(Math.PI * (_prngProxy2.default.next() - 0.5));
            }
            return this.location + this.scale * randomTan;
        }

        /**
         * Generates Cauchy distributed numbers
         * @param n: number - Number of elements in resulting array, n > 0
         * @returns Array<number> - Cauchy distributed numbers
         */

    }, {
        key: 'distribution',
        value: function distribution(n) {
            var cauchyArray = [],
                random = _prngProxy2.default.random(n),
                randomTan = void 0;
            for (var i = 0; i < n; i += 1) {
                randomTan = Math.tan(Math.PI * (random[i] - 0.5));
                while (Math.abs(randomTan) > TAN_LIMIT) {
                    randomTan = Math.tan(Math.PI * (_prngProxy2.default.next() - 0.5));
                }
                cauchyArray[i] = this.location + this.scale * randomTan;
            }
            return cauchyArray;
        }

        /**
         * Error handling
         * Parameter "gamma" must be positive
         * @returns {boolean}
         */

    }, {
        key: 'isError',
        value: function isError() {
            if (!this.location || !this.scale && this.scale !== 0) {
                return { error: 'Cauchy distribution: you should point "x" and "gamma" numerical values' };
            }
            if (this.scale <= 0) {
                return { error: 'Cauchy distribution: parameter "gamma" must be positive' };
            }
            return { error: false };
        }

        /**
         * Refresh method
         * @param newX: number - new parameter "x"
         * @param newGamma: number - new parameter "gamma"
         * This method does not return values
         */

    }, {
        key: 'refresh',
        value: function refresh(newX, newGamma) {
            this.location = Number(newX);
            this.scale = Number(newGamma);
        }

        /**
         * Class .toString method
         * @returns {string}
         */

    }, {
        key: 'toString',
        value: function toString() {
            var info = ['Cauchy Distribution', 'Usage: unirand.cauchy(' + this.location + ', ' + this.scale + ').random()'];
            return info.join('\n');
        }

        /**
         * Mean value of Cauchy distribution is undefined
         */

        /**
         * Median value
         * Information only
         * For calculating real median value use analyzer
         */

    }, {
        key: 'median',
        get: function get() {
            return this.location;
        }

        /**
         * Mode value - value, which appears most often
         * Information only
         * For calculating real mode value use analyzer
         */

    }, {
        key: 'mode',
        get: function get() {
            return this.location;
        }

        /**
         * Variance and Skewness values of Cauchy distribution are undefined
         */

        /**
         * Entropy value
         * Information only
         * For calculating real entropy value use analyzer
         */

    }, {
        key: 'entropy',
        get: function get() {
            return Math.log(4 * Math.PI * this.scale);
        }

        /**
         * All parameters of distribution in one object
         * Information only
         */

    }, {
        key: 'parameters',
        get: function get() {
            return {
                median: this.median,
                mode: this.mode,
                entropy: this.entropy
            };
        }
    }]);

    return Cauchy;
}();

module.exports = Cauchy;