'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Lognormal distribution
 * This is continuous distribution
 * https://en.wikipedia.org/wiki/Log-normal_distribution
 * @param mu <number> - location, any number
 * @param sigma <number>, sigma > 0
 * @returns Lognormal distributed number
 * Created by Alexey S. Kiselev
 */

var Normal = require('./normal');

var Lognormal = function () {
    function Lognormal(mu, sigma) {
        _classCallCheck(this, Lognormal);

        this.mu = Number(mu);
        this.sigma = Number(sigma);
        this.normal = new Normal(0, 1);
    }

    /**
     * Generates a random number
     * @returns a Lognormal distributed number
     */


    _createClass(Lognormal, [{
        key: 'random',
        value: function random() {
            return this._random(this.normal.random());
        }

        /**
         * Generates next seeded random number
         * @returns {number}
         */

    }, {
        key: 'next',
        value: function next() {
            return this._random(this.normal.next());
        }
    }, {
        key: '_random',
        value: function _random(u) {
            return Math.exp(this.mu + this.sigma * u);
        }

        /**
         * Generates lognormal distributed numbers
         * @param n: number - Number of elements in resulting array, n > 0
         * @returns Array<number> - lognormal distributed numbers
         */

    }, {
        key: 'distribution',
        value: function distribution(n) {
            var lognormalArray = [],
                random = this.normal.distribution(n);
            for (var i = 0; i < n; i += 1) {
                lognormalArray[i] = this._random(random[i]);
            }
            return lognormalArray;
        }

        /**
         * Error handling
         * @returns {boolean}
         */

    }, {
        key: 'isError',
        value: function isError() {
            if (!this.mu && this.mu !== 0 || !this.sigma) {
                return { error: 'Lognormal distribution: you should point parameters "mu" and "sigma" with numerical values' };
            }
            if (this.sigma <= 0) {
                return { error: 'Lognormal distribution: parameter "sigma" must be a positive number' };
            }
            return { error: false };
        }

        /**
         * Refresh method
         * @param newMu: number - new parameter "mu"
         * @param newSigma: number - new parameter "sigma"
         * This method does not return values
         */

    }, {
        key: 'refresh',
        value: function refresh(newMu, newSigma) {
            this.mu = Number(newMu);
            this.sigma = Number(newSigma);
        }

        /**
         * Class .toString method
         * @returns {string}
         */

    }, {
        key: 'toString',
        value: function toString() {
            var info = ['Lognormal Distribution', 'Usage: unirand.lognormal(' + this.mu + ', ' + this.sigma + ').random()'];
            return info.join('\n');
        }

        /**
         * Mean value
         * Information only
         * For calculating real mean value use analyzer
         */

    }, {
        key: 'mean',
        get: function get() {
            return Math.exp(this.mu + 0.5 * Math.pow(this.sigma, 2));
        }

        /**
         * Median value
         * Information only
         * For calculating real median value use analyzer
         */

    }, {
        key: 'median',
        get: function get() {
            return Math.exp(this.mu);
        }

        /**
         * Mode value - value, which appears most often
         * Information only
         * For calculating real mode value use analyzer
         */

    }, {
        key: 'mode',
        get: function get() {
            return Math.exp(this.mu - Math.pow(this.sigma, 2));
        }

        /**
         * Variance value
         * Information only
         * For calculating real variance value use analyzer
         */

    }, {
        key: 'variance',
        get: function get() {
            return (Math.exp(Math.pow(this.sigma, 2)) - 1) * Math.pow(this.mean, 2);
        }

        /**
         * Skewness value
         * Information only
         * For calculating real skewness value use analyzer
         */

    }, {
        key: 'skewness',
        get: function get() {
            var temp = Math.exp(Math.pow(this.sigma, 2)) - 1;
            return (temp + 3) * Math.sqrt(temp);
        }

        /**
         * Kurtosis value
         * Information only
         * For calculating real kurtosis value use analyzer
         */

    }, {
        key: 'kurtosis',
        get: function get() {
            var sigma2 = Math.pow(this.sigma, 2);
            return Math.exp(4 * sigma2) + 2 * Math.exp(3 * sigma2) + 3 * Math.exp(2 * sigma2) - 6;
        }

        /**
         * Entropy value
         * Information only
         * For calculating real entropy value use analyzer
         */

    }, {
        key: 'entropy',
        get: function get() {
            return Math.log(this.sigma * Math.exp(this.mu + 0.5) * Math.sqrt(2 * Math.PI));
        }

        /**
         * Fisher information matrix
         * Information only
         */

    }, {
        key: 'fisher',
        get: function get() {
            return [[1 / Math.pow(this.sigma, 2), 0], [0, 0.5 / Math.pow(this.sigma, 4)]];
        }

        /**
         * All parameters of distribution in one object
         * Information only
         */

    }, {
        key: 'parameters',
        get: function get() {
            return {
                mean: this.mean,
                median: this.median,
                mode: this.mode,
                variance: this.variance,
                skewness: this.skewness,
                kurtosis: this.kurtosis,
                entropy: this.entropy,
                fisher: this.fisher
            };
        }
    }]);

    return Lognormal;
}();

module.exports = Lognormal;