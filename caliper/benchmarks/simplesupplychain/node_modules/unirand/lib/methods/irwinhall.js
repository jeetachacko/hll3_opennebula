'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Irwin-Hall distribution
 * https://en.wikipedia.org/wiki/Irwin%E2%80%93Hall_distribution
 * @param n: number, n >= 1
 * Created by Alexey S. Kiselev
 */

var Uniform = require('./uniform');

var IrwinHall = function () {
    function IrwinHall(n) {
        _classCallCheck(this, IrwinHall);

        this.n = Math.floor(n);
        this._uniform = new Uniform(0, 1);
    }

    /**
     * Generates a random number
     * @returns a Irwin-Hall distributed number
     */


    _createClass(IrwinHall, [{
        key: 'random',
        value: function random() {
            var random_number = 0,
                random = this._uniform.distribution(this.n);
            for (var k = 0; k < this.n; k += 1) {
                random_number += random[k];
            }
            return random_number;
        }

        /**
         * Generates next seeded random number
         * @returns {number}
         */

    }, {
        key: 'next',
        value: function next() {
            var random_number = 0;
            for (var k = 0; k < this.n; k += 1) {
                random_number += this._uniform.next();
            }
            return random_number;
        }

        /**
         * Generates random distribution
         * @returns an array with Irwin-Hall distributed numbers
         */

    }, {
        key: 'distribution',
        value: function distribution(n) {
            var irwinHallArray = [],
                random_number = void 0,
                random = this._uniform.distribution(n * this.n);
            for (var i = 0; i < n; i += 1) {
                random_number = 0;
                for (var k = 0; k < this.n; k += 1) {
                    random_number += random[i * this.n + k];
                }
                irwinHallArray[i] = random_number;
            }
            return irwinHallArray;
        }
    }, {
        key: 'isError',
        value: function isError() {
            if (!this.n || this.n < 1) {
                return { error: 'Irwin-Hall distribution: you should point "n" positive integer value' };
            }
            return { error: false };
        }

        /**
         * Refresh method
         * @param newN: number - new parameter "n"
         * This method does not return values
         */

    }, {
        key: 'refresh',
        value: function refresh(newN) {
            this.n = Math.floor(newN);
        }

        /**
         * Class .toString method
         * @returns {string}
         */

    }, {
        key: 'toString',
        value: function toString() {
            var info = ['Irwin-Hall Distribution', 'Usage: unirand.irwinhall(' + this.n + ').random()'];
            return info.join('\n');
        }

        /**
         * Mean value
         * Information only
         * For calculating real mean value use analyzer
         */

    }, {
        key: 'mean',
        get: function get() {
            return this.n / 2;
        }

        /**
         * Median value
         * Information only
         * For calculating real mean value use analyzer
         */

    }, {
        key: 'median',
        get: function get() {
            return this.n / 2;
        }

        /**
         * Variance value
         * Information only
         * For calculating real variance value use analyzer
         */

    }, {
        key: 'variance',
        get: function get() {
            return this.n / 12;
        }

        /**
         * Skewness value
         * Information only
         * For calculating real skewness value use analyzer
         */

    }, {
        key: 'skewness',
        get: function get() {
            return 0;
        }

        /**
         * Kurtosis value
         * Information only
         */

    }, {
        key: 'kurtosis',
        get: function get() {
            return -1.2 / this.n;
        }

        /**
         * All parameters of distribution in one object
         * Information only
         */

    }, {
        key: 'parameters',
        get: function get() {
            return {
                mean: this.mean,
                median: this.median,
                variance: this.variance,
                skewness: this.skewness,
                kurtosis: this.kurtosis
            };
        }
    }]);

    return IrwinHall;
}();

module.exports = IrwinHall;