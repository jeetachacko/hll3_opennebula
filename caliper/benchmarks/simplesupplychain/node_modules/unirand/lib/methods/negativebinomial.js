'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Negative Binomial Distribution
 * This is discreet distribution
 * https://en.wikipedia.org/wiki/Negative_binomial_distribution
 * @param r: number - integer number, r > 0
 * @param p: number - float number, 0 <= p <= 1
 * @returns a Negative Binomial Distributed number
 * Created by Alexey S. Kiselev
 */

var Gamma = require('./gamma');
var Poisson = require('./poisson');

var NegativeBinomial = function () {
    function NegativeBinomial(r, p) {
        _classCallCheck(this, NegativeBinomial);

        this.numberSuccess = Number(r);
        this.successProb = Number(p);
        this.gamma = new Gamma(this.numberSuccess, this.successProb / (1 - this.successProb));
        this.poisson = new Poisson(1);
    }

    /**
     * Generates a random number
     * @returns a Negative Binomial distributed number
     */


    _createClass(NegativeBinomial, [{
        key: 'random',
        value: function random() {
            this.gamma.refresh(this.numberSuccess, this.successProb / (1 - this.successProb));
            var temp = this.gamma.random();
            this.poisson.refresh(temp);
            return this.poisson.random();
        }

        /**
         * Generates next seeded random number
         * @returns {number}
         */

    }, {
        key: 'next',
        value: function next() {
            this.gamma.refresh(this.numberSuccess, this.successProb / (1 - this.successProb));
            var temp = this.gamma.next();
            this.poisson.refresh(temp);
            return this.poisson.next();
        }

        /**
         * Generates Negative Binomial distributed numbers
         * @param n: number - Number of elements in resulting array, n > 0
         * @returns Array<number> - Negative Binomial distributed numbers
         */

    }, {
        key: 'distribution',
        value: function distribution(n) {
            this.gamma.refresh(this.numberSuccess, this.successProb / (1 - this.successProb));
            var negativeBinomialArray = [],
                random = this.gamma.distribution(n);
            for (var i = 0; i < n; i += 1) {
                this.poisson.refresh(random[i]);
                negativeBinomialArray[i] = this.poisson.next();
            }
            return negativeBinomialArray;
        }

        /**
         * Error handling
         * Parameter "r" must be positive integer
         * Parameter "p" must be 0 <= p <= 1
         * @returns {boolean}
         */

    }, {
        key: 'isError',
        value: function isError() {
            if (!this.numberSuccess || !this.successProb && this.successProb !== 0) {
                return { error: 'Negative Binomial distribution: you should point "r" and "p" parameters with numerical values' };
            }
            if (this.numberSuccess <= 0) {
                return { error: 'Negative Binomial distribution: parameter "r" must be positive integer' };
            }
            if (this.successProb < 0 || this.successProb > 1) {
                return { error: 'Negative Binomial distribution: parameter "p" (probability of success) must be 0 <= p <= 1' };
            }
            return { error: false };
        }

        /**
         * Refresh method
         * @param newR: number - new parameter "r"
         * @param newP: number - new parameter "p"
         * This method does not return values
         */

    }, {
        key: 'refresh',
        value: function refresh(newR, newP) {
            this.numberSuccess = Number(newR);
            this.successProb = Number(newP);
        }

        /**
         * Class .toString method
         * @returns {string}
         */

    }, {
        key: 'toString',
        value: function toString() {
            var info = ['Negative Binomial Distribution', 'Usage: unirand.negativebinomial(' + this.numberSuccess + ', ' + this.successProb + ').random()'];
            return info.join('\n');
        }

        /**
         * Mean value
         * Information only
         * For calculating real mean value use analyzer
         */

    }, {
        key: 'mean',
        get: function get() {
            return this.numberSuccess * (1 - this.successProb) / this.successProb;
        }

        /**
         * Mode value
         * Information only
         * For calculating real mode value use analyzer
         */

    }, {
        key: 'mode',
        get: function get() {
            if (this.numberSuccess > 1) {
                return Math.floor((this.numberSuccess - 1) * (1 - this.successProb) / this.successProb);
            }
            return 0;
        }

        /**
         * Variance value
         * Information only
         * For calculating real variance value use analyzer
         */

    }, {
        key: 'variance',
        get: function get() {
            return this.mean / this.successProb;
        }

        /**
         * Skewness value
         * Information only
         * For calculating real skewness value use analyzer
         */

    }, {
        key: 'skewness',
        get: function get() {
            return (2 - this.successProb) / Math.sqrt(this.numberSuccess * (1 - this.successProb));
        }

        /**
         * Kurtosis value
         * Information only
         * For calculating real kurtosis value use analyzer
         */

    }, {
        key: 'kurtosis',
        get: function get() {
            return 6 / this.numberSuccess + 1 / this.variance;
        }

        /**
         * All parameters of distribution in one object
         * Information only
         */

    }, {
        key: 'parameters',
        get: function get() {
            return {
                mean: this.mean,
                mode: this.mode,
                variance: this.variance,
                skewness: this.skewness,
                kurtosis: this.kurtosis
            };
        }
    }]);

    return NegativeBinomial;
}();

module.exports = NegativeBinomial;