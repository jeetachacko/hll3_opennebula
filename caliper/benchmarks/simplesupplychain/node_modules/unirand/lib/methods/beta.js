'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Beta Distribution
 * This is continuous distribution
 * https://en.wikipedia.org/wiki/Beta_distribution
 * @param alpha: number - alpha > 0, alpha must be integer
 * @param beta: number - beta > 0, beta must be integer
 * @returns Beta Distributed value
 * Created by Alexey S. Kiselev
 */

var Gamma = require('./gamma'),
    Utils = require('../utils/utils');

var Beta = function () {
    function Beta(alpha, beta) {
        _classCallCheck(this, Beta);

        this.alpha = Number(alpha);
        this.beta = Number(beta);
        // Create an instance of Gamma distribution class for alpha
        this.gammaA = new Gamma(this.alpha, 1);
        // Create an instance of Gamma distribution class for beta
        this.gammaB = new Gamma(this.beta, 1);
    }

    /**
     * Generates a random number
     * First: refresh Gamma class (I need it to ensure I have correct value after refreshing Beta class),
     * then create a gammaA variable, then refresh Gamma class, then create gammaB variable
     * @returns a Beta distributed number
     */


    _createClass(Beta, [{
        key: 'random',
        value: function random() {
            var gammaA = void 0,
                gammaB = void 0;

            this.gammaA.refresh(this.alpha, 1);
            gammaA = this.gammaA.random();

            this.gammaB.refresh(this.beta, 1);
            gammaB = this.gammaB.random();

            return gammaA / (gammaA + gammaB);
        }

        /**
         * Generates next seeded random number
         * @returns {number}
         */

    }, {
        key: 'next',
        value: function next() {
            var gammaA = void 0,
                gammaB = void 0;

            this.gammaA.refresh(this.alpha, 1);
            gammaA = this.gammaA.next();

            this.gammaB.refresh(this.beta, 1);
            gammaB = this.gammaB.next();

            return gammaA / (gammaA + gammaB);
        }

        /**
         * Generates Beta distributed numbers
         * For generating array I am not going to use .random method
         * For performance I am going to create another instance of Gamma class
         * @param n: number - Number of elements in resulting array, n > 0
         * @returns Array<number> - Beta distributed numbers
         */

    }, {
        key: 'distribution',
        value: function distribution(n) {
            var betaArray = [],
                gammaA = void 0,
                gammaB = void 0,
                gammaADist = void 0,
                gammaBDist = void 0;

            this.gammaA.refresh(this.alpha, 1);
            this.gammaB.refresh(this.beta, 1);
            gammaADist = this.gammaA.distribution(n);
            gammaBDist = this.gammaB.distribution(n);

            for (var i = 0; i < n; i += 1) {
                gammaA = gammaADist[i];
                gammaB = gammaBDist[i];
                betaArray[i] = gammaA / (gammaA + gammaB);
            }
            return betaArray;
        }

        /**
         * Error handling
         * Parameter "alpha" must be positive
         * Parameter "beta" must be positive
         * @returns {boolean}
         */

    }, {
        key: 'isError',
        value: function isError() {
            if (!this.alpha || !this.beta) {
                return { error: 'Beta distribution: you should point "alpha" and "beta" positive numerical values' };
            }
            if (this.alpha <= 0) {
                return { error: 'Beta distribution: Parameter "alpha" must be positive' };
            }
            if (this.beta <= 0) {
                return { error: 'Beta distribution: Parameter "beta" must be positive' };
            }
            return { error: false };
        }

        /**
         * Refresh method
         * @param newAlpha: number - new parameter "alpha"
         * @param newBeta: number - new parameter "beta"
         * This method does not return values
         */

    }, {
        key: 'refresh',
        value: function refresh(newAlpha, newBeta) {
            this.alpha = Number(newAlpha);
            this.beta = Number(newBeta);
        }

        /**
         * Class .toString method
         * @returns {string}
         */

    }, {
        key: 'toString',
        value: function toString() {
            var info = ['Beta Distribution', 'Usage: unirand.beta(' + this.alpha + ', ' + this.beta + ').random()'];
            return info.join('\n');
        }

        /**
         * Mean value
         * Information only
         * For calculating real mean value use analyzer
         */

    }, {
        key: 'mean',
        get: function get() {
            return this.alpha / (this.alpha + this.beta);
        }

        /**
         * Mode value
         * This formula is correct only for "alpha" > 1 and "beta" > 1
         * Information only
         * For calculating real mode value use analyzer
         */

    }, {
        key: 'mode',
        get: function get() {
            return (this.alpha - 1) / (this.alpha + this.beta - 2);
        }

        /**
         * Variance value
         * Information only
         * For calculating real variance value use analyzer
         */

    }, {
        key: 'variance',
        get: function get() {
            return this.alpha * this.beta / (Math.pow(this.alpha + this.beta, 2) * (this.alpha + this.beta + 1));
        }

        /**
         * Skewness value
         * Information only
         * For calculating real skewness value use analyzer
         */

    }, {
        key: 'skewness',
        get: function get() {
            return 2 * (this.beta - this.alpha) * Math.sqrt(this.alpha + this.beta + 1) / ((this.alpha + this.beta + 2) * Math.sqrt(this.alpha * this.beta));
        }

        /**
         * Kurtosis value
         * Information only
         */

    }, {
        key: 'kurtosis',
        get: function get() {
            var a_plus_b = this.alpha + this.beta + 1;
            return 6 * (Math.pow(this.alpha - this.beta, 2) * a_plus_b - this.alpha * this.beta * (a_plus_b + 1)) / (this.alpha * this.beta * (a_plus_b + 1) * (a_plus_b + 2));
        }

        /**
         * Entropy value
         * Information only
         * For calculating real entropy value use analyzer
         */

    }, {
        key: 'entropy',
        get: function get() {
            var B = Utils.gamma(this.alpha) * Utils.gamma(this.beta) / Utils.gamma(this.alpha + this.beta);
            return Math.log(B) - (this.alpha - 1) * Utils.digamma(this.alpha) - (this.beta - 1) * Utils.digamma(this.beta) + (this.alpha + this.beta - 2) * Utils.digamma(this.alpha + this.beta);
        }

        /**
         * All parameters of distribution in one object
         * Information only
         */

    }, {
        key: 'parameters',
        get: function get() {
            return {
                mean: this.mean,
                mode: this.mode,
                variance: this.variance,
                skewness: this.skewness,
                entropy: this.entropy,
                kurtosis: this.kurtosis
            };
        }
    }]);

    return Beta;
}();

module.exports = Beta;