'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

/**
 * Binomial Distribution
 * This is discreet distribution
 * https://en.wikipedia.org/wiki/Binomial_distribution
 * @param n: number - Number of Independent Bernoulli trials
 * @param p: number (0 <= p <= 1) - Probability of success
 * @returns Binomial Distributed number
 * Created by Alexey S. Kiselev
 */

var _prngProxy = require('../prng/prngProxy');

var _prngProxy2 = _interopRequireDefault(_prngProxy);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Binomial = function () {
    function Binomial(n, p) {
        _classCallCheck(this, Binomial);

        this.trials = Number(n);
        this.successProb = Number(p);
    }

    /**
     * Generates a random number
     * @returns a Binomial distributed number
     */


    _createClass(Binomial, [{
        key: 'random',
        value: function random() {
            var res = 0,
                random = _prngProxy2.default.random(this.trials);
            for (var i = 0; i < this.trials; i += 1) {
                if (random[i] < this.successProb) {
                    res += 1;
                }
            }
            return res;
        }

        /**
         * Generates next seeded random number
         * @returns {number}
         */

    }, {
        key: 'next',
        value: function next() {
            var res = 0,
                random = void 0;
            for (var i = 0; i < this.trials; i += 1) {
                random = _prngProxy2.default.next();
                if (random < this.successProb) {
                    res += 1;
                }
            }
            return res;
        }

        /**
         * Generates Binomial distributed numbers
         * @param n: number - Number of elements in resulting array, n > 0
         * @returns Array<number> - Binomial distributed numbers
         */

    }, {
        key: 'distribution',
        value: function distribution(n) {
            var binomialArray = [],
                random = _prngProxy2.default.random(n * this.trials),
                res = void 0;
            for (var i = 0; i < n; i += 1) {
                res = 0;
                for (var k = 0; k < this.trials; k += 1) {
                    if (random[i * this.trials + k] < this.successProb) {
                        res += 1;
                    }
                }
                binomialArray[i] = res;
            }
            return binomialArray;
        }

        /**
         * Error handling
         * Parameter "n" must be positive integer
         * Parameter "p" must be 0 <= p <= 1
         * @returns {boolean}
         */

    }, {
        key: 'isError',
        value: function isError() {
            if (!this.trials || !this.successProb && this.successProb !== 0) {
                return { error: 'Binomial distribution: you should point parameter "n" like a positive integer and parameter "p" like a numerical value' };
            }
            if (this.trials <= 0) {
                return { error: 'Binomial distribution: parameter "n" must be positive integer' };
            }
            if (this.successProb < 0 || this.successProb > 1) {
                return { error: 'Binomial distribution: parameter "p" (probability of success) must be 0 <= p <= 1' };
            }
            return { error: false };
        }

        /**
         * Refresh method
         * @param newN: number - new parameter "n"
         * @param newP: number - new parameter "p"
         * This method does not return values
         */

    }, {
        key: 'refresh',
        value: function refresh(newN, newP) {
            this.trials = Number(newN);
            this.successProb = Number(newP);
        }

        /**
         * Class .toString method
         * @returns {string}
         */

    }, {
        key: 'toString',
        value: function toString() {
            var info = ['Binomial Distribution', 'Usage: unirand.binomial(' + this.trials + ', ' + this.successProb + ').random()'];
            return info.join('\n');
        }

        /**
         * Mean value
         * Information only
         * For calculating real mean value use analyzer
         */

    }, {
        key: 'mean',
        get: function get() {
            return this.trials * this.successProb;
        }

        /**
         * Median value
         * Information only
         * For calculating real median value use analyzer
         */

    }, {
        key: 'median',
        get: function get() {
            return (Math.floor(this.trials * this.successProb) + Math.floor(this.trials * this.successProb)) / 2;
        }

        /**
         * There are no exact Mode and Median parameters
         */

        /**
         * Variance value
         * Information only
         * For calculating real variance value use analyzer
         */

    }, {
        key: 'variance',
        get: function get() {
            return this.trials * this.successProb * (1 - this.successProb);
        }

        /**
         * Skewness value
         * Information only
         * For calculating real skewness value use analyzer
         */

    }, {
        key: 'skewness',
        get: function get() {
            return (1 - 2 * this.successProb) / Math.sqrt(this.variance);
        }

        /**
         * Entropy value
         * Information only
         */

    }, {
        key: 'entropy',
        get: function get() {
            return 0.5 * 0.693 * Math.log2(2 * Math.PI * Math.E * this.trials * this.successProb * (1 - this.successProb));
        }

        /**
         * Kurtosis value
         * Information only
         */

    }, {
        key: 'kurtosis',
        get: function get() {
            return (1 - 6 * this.successProb * (1 - this.successProb)) / (this.trials * this.successProb * (1 - this.successProb));
        }

        /**
         * All parameters of distribution in one object
         * Information only
         */

    }, {
        key: 'parameters',
        get: function get() {
            return {
                mean: this.mean,
                median: this.median,
                variance: this.variance,
                skewness: this.skewness,
                entropy: this.entropy,
                kurtosis: this.kurtosis
            };
        }
    }]);

    return Binomial;
}();

module.exports = Binomial;