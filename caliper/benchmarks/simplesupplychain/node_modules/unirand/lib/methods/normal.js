'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

/**
 * Normal Gaussian Distribution
 * https://en.wikipedia.org/wiki/Normal_distribution
 * @param mu: number - Mu value of Normal Distribution, any value
 * @param sigma: number - Sigma value of Normal Distribution, sigma > 0
 * @returns Normal Distributed value based on parameters
 * Created by Alexey S. Kiselev
 */

var _prngProxy = require('../prng/prngProxy');

var _prngProxy2 = _interopRequireDefault(_prngProxy);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Normal = function () {
    function Normal(mu, sigma) {
        _classCallCheck(this, Normal);

        this.mu = Number(mu);
        this.sigma = Number(sigma);
    }

    /**
     * Generates a random number
     * Uses Box-Muller transform and Marsaglia polar method
     * This method generates two random numbers, but use one of it
     * @returns a normal distributed number
     */


    _createClass(Normal, [{
        key: 'random',
        value: function random() {
            _prngProxy2.default.random();
            return this._random();
        }

        /**
         * Generates next seeded random number
         * @returns {number}
         */

    }, {
        key: 'next',
        value: function next() {
            return this._random();
        }
    }, {
        key: '_random',
        value: function _random() {
            var U1 = void 0,
                U2 = void 0,
                W = void 0,
                mult = void 0;
            do {
                U1 = 2 * _prngProxy2.default.next() - 1;
                U2 = 2 * _prngProxy2.default.next() - 1;
                W = Math.pow(U1, 2) + Math.pow(U2, 2);
            } while (W >= 1 || W === 0);
            mult = Math.sqrt(-2 * Math.log(W) / W);

            return this.mu + this.sigma * U1 * mult;
        }

        /**
         * Generates normal distributed numbers
         * Uses the same algorithm as in .random() method
         * Add both two random generated values to array
         * For this purpose use algorithm again (not .random() method)
         * @param n: number - Number of elements in resulting array, n > 0
         * @returns Array<number> - normal distributed numbers
         */

    }, {
        key: 'distribution',
        value: function distribution(n) {
            var normalArray = [],
                U1 = void 0,
                U2 = void 0,
                W = void 0,
                mult = void 0;
            _prngProxy2.default.random();
            for (var i = 0; i < n; i += 2) {
                do {
                    U1 = 2 * _prngProxy2.default.next() - 1;
                    U2 = 2 * _prngProxy2.default.next() - 1;
                    W = Math.pow(U1, 2) + Math.pow(U2, 2);
                } while (W >= 1 || W === 0);
                mult = Math.sqrt(-2 * Math.log(W) / W);
                normalArray[i] = this.mu + this.sigma * U1 * mult;
                normalArray[i + 1] = this.mu + this.sigma * U2 * mult;
            }
            /**
             * This algorithm generates two values
             * So, if we need odd-length array check value "n"
             * if "n" is odd - delete last element
             */
            if (n % 2 !== 0) {
                normalArray.pop();
            }
            return normalArray;
        }

        /**
         * Error handling
         * @returns {boolean}
         */

    }, {
        key: 'isError',
        value: function isError() {
            if (!this.mu && this.mu !== 0 || !this.sigma && this.sigma !== 0) {
                return { error: 'Normal distribution: you should point "mu" and "sigma" numerical values' };
            }

            if (this.sigma <= 0) {
                return { error: 'Normal distribution: parameter "sigma" must be a positive value' };
            }

            return { error: false };
        }

        /**
         * Refresh method
         * @param newMu: number - new parameter "mu"
         * @param newSigma: number - new parameter "sigma"
         * This method does not return values
         */

    }, {
        key: 'refresh',
        value: function refresh(newMu, newSigma) {
            this.mu = Number(newMu);
            this.sigma = Number(newSigma);
        }

        /**
         * Class .toString method
         * @returns {string}
         */

    }, {
        key: 'toString',
        value: function toString() {
            var info = ['Normal (Gaussian) Distribution', 'Usage: unirand.normal(' + this.mu + ', ' + this.sigma + ').random()'];
            return info.join('\n');
        }

        /**
         * Mean value
         * Information only
         * For calculating real mean value use analyzer
         */

    }, {
        key: 'mean',
        get: function get() {
            return this.mu;
        }

        /**
         * Median value
         * Information only
         * For calculating real median value use analyzer
         */

    }, {
        key: 'median',
        get: function get() {
            return this.mu;
        }

        /**
         * Mode value - value, which appears most often
         * Information only
         * For calculating real mode value use analyzer
         */

    }, {
        key: 'mode',
        get: function get() {
            return this.mu;
        }

        /**
         * Variance value
         * Information only
         * For calculating real variance value use analyzer
         */

    }, {
        key: 'variance',
        get: function get() {
            return Math.pow(this.sigma, 2);
        }

        /**
         * Skewness value
         * Information only
         * For calculating real skewness value use analyzer
         */

    }, {
        key: 'skewness',
        get: function get() {
            return 0;
        }

        /**
         * Entropy value
         * Information only
         * For calculating real entropy value use analyzer
         */

    }, {
        key: 'entropy',
        get: function get() {
            return Math.log(2 * Math.PI * Math.E * this.variance) / 2;
        }

        /**
         * Kurtosis value
         * Information only
         */

    }, {
        key: 'kurtosis',
        get: function get() {
            return 0;
        }

        /**
         * Fisher information matrix
         * Information only
         */

    }, {
        key: 'fisher',
        get: function get() {
            return [[1 / this.variance, 0], [0, 0.5 / Math.pow(this.variance, 2)]];
        }

        /**
         * All parameters of distribution in one object
         * Information only
         */

    }, {
        key: 'parameters',
        get: function get() {
            return {
                mean: this.mean,
                median: this.median,
                mode: this.mode,
                variance: this.variance,
                skewness: this.skewness,
                entropy: this.entropy,
                fisher: this.fisher
            };
        }
    }]);

    return Normal;
}();

module.exports = Normal;