'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

/**
 * Pareto distribution
 * This is continuous distribution
 * https://en.wikipedia.org/wiki/Pareto_distribution
 * @param xm <number> - scale parameter, xm > 0
 * @param alpha <number> - shape parameter, alpha > 0
 * @returns Pareto distributed value
 * Created by Alexey S. Kiselev
 */

var _prngProxy = require('../prng/prngProxy');

var _prngProxy2 = _interopRequireDefault(_prngProxy);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Pareto = function () {
    function Pareto(xm, alpha) {
        _classCallCheck(this, Pareto);

        this.xm = Number(xm);
        this.alpha = Number(alpha);
    }

    /**
     * Generates a random number
     * @returns a Pareto distributed number
     */


    _createClass(Pareto, [{
        key: 'random',
        value: function random() {
            var u = _prngProxy2.default.random();
            return this._random(u);
        }

        /**
         * Generates next seeded random number
         * @returns {number}
         */

    }, {
        key: 'next',
        value: function next() {
            return this._random(_prngProxy2.default.next());
        }

        /**
         * For simplicity
         * @param {number} u
         * @private
         */

    }, {
        key: '_random',
        value: function _random(u) {
            return this.xm * Math.pow(u, -1 / this.alpha);
        }

        /**
         * Generates Pareto distributed numbers
         * @param n: number - Number of elements in resulting array, n > 0
         * @returns Array<number> - Pareto distributed numbers
         */

    }, {
        key: 'distribution',
        value: function distribution(n) {
            var paretoArray = [],
                random = _prngProxy2.default.random(n);
            for (var i = 0; i < n; i += 1) {
                paretoArray[i] = this._random(random[i]);
            }
            return paretoArray;
        }

        /**
         * Error handling
         * @returns {boolean}
         */

    }, {
        key: 'isError',
        value: function isError() {
            if (!this.xm && this.xm !== 0 || !this.alpha && this.alpha !== 0) {
                return { error: 'Pareto distribution: you should point "xm" (scale) and "alpha" (shape) numerical values' };
            }
            if (this.xm <= 0 || this.alpha <= 0) {
                return { error: 'Pareto distribution: parameters "xm" (scale) and "alpha" (shape) must be a positive values' };
            }
            return { error: false };
        }

        /**
         * Refresh method
         * @param newXm: number - new parameter "xm"
         * @param newAlpha: number - new parameter "alpha"
         * This method does not return values
         */

    }, {
        key: 'refresh',
        value: function refresh(newXm, newAlpha) {
            this.xm = Number(newXm);
            this.alpha = Number(newAlpha);
        }

        /**
         * Class .toString method
         * @returns {string}
         */

    }, {
        key: 'toString',
        value: function toString() {
            var info = ['Pareto Distribution', 'Usage: unirand.pareto(' + this.xm + ', ' + this.alpha + ').random()'];
            return info.join('\n');
        }

        /**
         * Mean value
         * Information only
         * For calculating real mean value use analyzer
         */

    }, {
        key: 'mean',
        get: function get() {
            if (this.alpha > 1) {
                return this.alpha * this.xm / (this.alpha - 1);
            }
            return Infinity;
        }

        /**
         * Median value
         * Information only
         * For calculating real median value use analyzer
         */

    }, {
        key: 'median',
        get: function get() {
            return this.xm * Math.pow(2, 1 / this.alpha);
        }

        /**
         * Mode value - value, which appears most often
         * Information only
         * For calculating real mode value use analyzer
         */

    }, {
        key: 'mode',
        get: function get() {
            return this.xm;
        }

        /**
         * Variance value
         * Information only
         * For calculating real variance value use analyzer
         */

    }, {
        key: 'variance',
        get: function get() {
            if (this.alpha > 2) {
                return Math.pow(this.xm, 2) * this.alpha / (Math.pow(this.alpha - 1, 2) * (this.alpha - 2));
            }
            return Infinity;
        }

        /**
         * Skewness value
         * Information only
         * For calculating real skewness value use analyzer
         */

    }, {
        key: 'skewness',
        get: function get() {
            if (this.alpha > 3) {
                return 2 * Math.sqrt((this.alpha - 2) / this.alpha) * (1 + this.alpha) / (this.alpha - 3);
            }
            return undefined;
        }

        /**
         * Kurtosis value
         * Information only
         * For calculating real kurtosis value use analyzer
         */

    }, {
        key: 'kurtosis',
        get: function get() {
            if (this.alpha > 4) {
                return 6 * (Math.pow(this.alpha, 3) + Math.pow(this.alpha, 2) - 6 * this.alpha - 2) / (this.alpha * (this.alpha - 3) * (this.alpha - 4));
            }
            return undefined;
        }

        /**
         * Entropy value
         * Information only
         * For calculating real entropy value use analyzer
         */

    }, {
        key: 'entropy',
        get: function get() {
            return Math.log(this.xm * Math.exp(1 + 1 / this.alpha) / this.alpha);
        }

        /**
         * Fisher information matrix
         * Information only
         */

    }, {
        key: 'fisher',
        get: function get() {
            return [[this.alpha / Math.pow(this.xm, 2), -1 / this.xm], [-1 / this.xm, 1 / Math.pow(this.alpha, 2)]];
        }

        /**
         * All parameters of distribution in one object
         * Information only
         */

    }, {
        key: 'parameters',
        get: function get() {
            return {
                mean: this.mean,
                median: this.median,
                mode: this.mode,
                variance: this.variance,
                skewness: this.skewness,
                kurtosis: this.kurtosis,
                entropy: this.entropy,
                fisher: this.fisher
            };
        }
    }]);

    return Pareto;
}();

module.exports = Pareto;