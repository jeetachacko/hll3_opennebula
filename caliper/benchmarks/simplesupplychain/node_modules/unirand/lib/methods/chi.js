'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Chi Distribution
 * This is continuous distribution
 * https://en.wikipedia.org/wiki/Chi_distribution
 * @param k: number - degrees of freedom k > 0
 * @returns Chi Distributed value
 * Created by Alexey S. Kiselev
 */

var ChiSquare = require('./chisquare');
var Utils = require('../utils/utils');

var Chi = function () {
    function Chi(k) {
        _classCallCheck(this, Chi);

        this.degrees = Number(k);
        this.chiSquare = new ChiSquare(this.degrees);
    }

    /**
     * Generates a random number
     * @returns a Chi distributed number
     */


    _createClass(Chi, [{
        key: 'random',
        value: function random() {
            this.chiSquare.refresh(this.degrees);
            return Math.sqrt(this.chiSquare.random());
        }

        /**
         * Generates next seeded random number
         * @returns {number}
         */

    }, {
        key: 'next',
        value: function next() {
            this.chiSquare.refresh(this.degrees);
            return Math.sqrt(this.chiSquare.next());
        }

        /**
         * Generates Chi distributed numbers
         * @param n: number - Number of elements in resulting array, n > 0
         * @returns Array<number> - Chi distributed numbers
         */

    }, {
        key: 'distribution',
        value: function distribution(n) {
            this.chiSquare.refresh(this.degrees);
            var chiArray = [],
                random = this.chiSquare.distribution(n);
            for (var i = 0; i < n; i += 1) {
                chiArray[i] = Math.sqrt(random[i]);
            }
            return chiArray;
        }

        /**
         * Error handling
         * Parameter "k" must be positive
         * @returns {boolean}
         */

    }, {
        key: 'isError',
        value: function isError() {
            if (!this.degrees) {
                return { error: 'Chi distribution: you should point parameter "k" positive numerical value' };
            }
            if (this.degrees <= 0) {
                return { error: 'Chi distribution: parameter "k" must be positive integer' };
            }
            return { error: false };
        }

        /**
         * Refresh method
         * @param newK: number - new parameter "k"
         * This method does not return values
         */

    }, {
        key: 'refresh',
        value: function refresh(newK) {
            this.degrees = Number(newK);
        }

        /**
         * Class .toString method
         * @returns {string}
         */

    }, {
        key: 'toString',
        value: function toString() {
            var info = ['Chi Distribution', 'Usage: unirand.chi(' + this.degrees + ').random()'];
            return info.join('\n');
        }

        /**
         * Mean value
         * Information only
         * For calculating real mean value use analyzer
         */

    }, {
        key: 'mean',
        get: function get() {
            return Math.sqrt(2) * Utils.gamma((this.degrees + 1) / 2) / Utils.gamma(this.degrees / 2);
        }

        /**
         * Median value (approximate value)
         * Information only
         * For calculating real median value use analyzer
         */

    }, {
        key: 'median',
        get: function get() {
            return Math.sqrt(this.degrees * Math.pow(1 - 2 / (9 * this.degrees), 3));
        }

        /**
         * Mode value
         * Information only
         * For calculating real mode value use analyzer
         */

    }, {
        key: 'mode',
        get: function get() {
            if (this.degrees >= 1) {
                return Math.sqrt(this.degrees - 1);
            }
        }

        /**
         * Variance value
         * Information only
         * For calculating real variance value use analyzer
         */

    }, {
        key: 'variance',
        get: function get() {
            return this.degrees - Math.pow(this.mean, 2);
        }

        /**
         * Skewness value
         * Information only
         * For calculating real skewness value use analyzer
         */

    }, {
        key: 'skewness',
        get: function get() {
            return this.mean * (1 - 2 * this.variance) / (this.variance * Math.sqrt(this.variance));
        }

        /**
         * Kurtosis value
         * Information only
         * For calculating real kurtosis value use analyzer
         */

    }, {
        key: 'kurtosis',
        get: function get() {
            return 2 * (1 - this.mean * Math.sqrt(this.variance) * this.skewness - this.variance) / this.variance;
        }

        /**
         * Entropy value
         * Information only
         * For calculating real entropy value use analyzer
         */

    }, {
        key: 'entropy',
        get: function get() {
            return Math.log(Utils.gamma(this.degrees / 2)) + 0.5 * (this.degrees - Math.log(2) - (this.degrees - 1) * Utils.digamma(this.degrees / 2));
        }

        /**
         * All parameters of distribution in one object
         * Information only
         */

    }, {
        key: 'parameters',
        get: function get() {
            return {
                mean: this.mean,
                mode: this.mode,
                median: this.median,
                variance: this.variance,
                skewness: this.skewness,
                entropy: this.entropy,
                kurtosis: this.kurtosis
            };
        }
    }]);

    return Chi;
}();

module.exports = Chi;