'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

/**
 * Geometric Distribution
 * This is discreet distribution
 * https://en.wikipedia.org/wiki/Geometric_distribution
 * @param p: number (0 <= p <= 1) - Probability of success
 * @returns Geometric Distributed Value
 * Created by Alexey S. Kiselev
 */

var _prngProxy = require('../prng/prngProxy');

var _prngProxy2 = _interopRequireDefault(_prngProxy);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Geometric = function () {
    function Geometric(p) {
        _classCallCheck(this, Geometric);

        this.successProb = Number(p);
    }

    /**
     * Generates a random number
     * @returns a Geometric distributed number
     */


    _createClass(Geometric, [{
        key: 'random',
        value: function random() {
            var res = 1,
                random = _prngProxy2.default.random();
            while (random >= this.successProb) {
                res += 1;
                random = _prngProxy2.default.next();
            }
            return res;
        }

        /**
         * Generates next seeded random number
         * @returns {number}
         */

    }, {
        key: 'next',
        value: function next() {
            var res = 1,
                random = _prngProxy2.default.next();
            while (random >= this.successProb) {
                res += 1;
                random = _prngProxy2.default.next();
            }
            return res;
        }

        /**
         * Generates Geometric distributed numbers
         * @param n: number - Number of elements in resulting array, n > 0
         * @returns Array<number> - Geometric distributed numbers
         */

    }, {
        key: 'distribution',
        value: function distribution(n) {
            var geometricArray = [],
                random = _prngProxy2.default.random(),
                res = void 0;
            for (var i = 0; i < n; i += 1) {
                res = 1;
                random = _prngProxy2.default.next();
                while (random >= this.successProb) {
                    res += 1;
                    random = _prngProxy2.default.next();
                }
                geometricArray[i] = res;
            }
            return geometricArray;
        }

        /**
         * Error handling
         * Parameter "p" must be 0 <= p <= 1
         * @returns {boolean}
         */

    }, {
        key: 'isError',
        value: function isError() {
            if (!this.successProb && this.successProb !== 0) {
                return { error: 'Geometric distribution: you should specify parameter "p" with numerical value' };
            }
            if (this.successProb < 0 || this.successProb > 1) {
                return { error: 'Geometric distribution: parameter "p" (probability of success) must be 0 <= p <= 1' };
            }
            return { error: false };
        }

        /**
         * Refresh method
         * @param newP: number - new parameter "p"
         * This method does not return values
         */

    }, {
        key: 'refresh',
        value: function refresh(newP) {
            this.successProb = Number(newP);
        }

        /**
         * Class .toString method
         * @returns {string}
         */

    }, {
        key: 'toString',
        value: function toString() {
            var info = ['Geometric Distribution', 'Usage: unirand.geometric(' + this.successProb + ').random()'];
            return info.join('\n');
        }

        /**
         * Mean value
         * Information only
         * For calculating real mean value use analyzer
         */

    }, {
        key: 'mean',
        get: function get() {
            return 1 / this.successProb;
        }

        /**
         * Geometric distribution doesn't have unique Median value
         */

        /**
         * Mode value - value, which appears most often
         * Information only
         * For calculating real mode value use analyzer
         */

    }, {
        key: 'mode',
        get: function get() {
            return 1;
        }

        /**
         * Variance value
         * Information only
         * For calculating real variance value use analyzer
         */

    }, {
        key: 'variance',
        get: function get() {
            return (1 - this.successProb) / Math.pow(this.successProb, 2);
        }

        /**
         * Skewness value
         * Information only
         * For calculating real skewness value use analyzer
         */

    }, {
        key: 'skewness',
        get: function get() {
            return (2 - this.successProb) / Math.sqrt(1 - this.successProb);
        }

        /**
         * Kurtosis value
         * Information only
         * For calculating real kurtosis value use analyzer
         */

    }, {
        key: 'kurtosis',
        get: function get() {
            return 6 + Math.pow(this.successProb, 2) / (1 - this.successProb);
        }

        /**
         * Entropy value
         * Information only
         * For calculating real entropy value use analyzer
         */

    }, {
        key: 'entropy',
        get: function get() {
            return (-(1 - this.successProb) * Math.log(1 - this.successProb) - this.successProb * Math.log(this.successProb)) / this.successProb;
        }

        /**
         * All parameters of distribution in one object
         * Information only
         */

    }, {
        key: 'parameters',
        get: function get() {
            return {
                mean: this.mean,
                mode: this.mode,
                variance: this.variance,
                skewness: this.skewness,
                entropy: this.entropy,
                kurtosis: this.kurtosis
            };
        }
    }]);

    return Geometric;
}();

module.exports = Geometric;