'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _prngProxy = require('../prng/prngProxy');

var _prngProxy2 = _interopRequireDefault(_prngProxy);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Bernoulli Distribution
 * https://en.wikipedia.org/wiki/Bernoulli_distribution
 * This is discreet distribution
 * @param p: number (0 <= p <= 1) - Probability of success
 * @returns 0 or 1
 * Created by Alexey S. Kiselev
 */

var Bernoulli = function () {
    function Bernoulli(p) {
        _classCallCheck(this, Bernoulli);

        this.p = Number(p);
    }

    /**
     * Generates a random number
     * @returns a Bernoulli distributed number
     * This method returns only "1" or "0"
     */


    _createClass(Bernoulli, [{
        key: 'random',
        value: function random() {
            return this._random(_prngProxy2.default.random());
        }

        /**
         * Generates next seeded random number
         * @returns {number}
         */

    }, {
        key: 'next',
        value: function next() {
            return this._random(_prngProxy2.default.next());
        }
    }, {
        key: '_random',
        value: function _random(u) {
            return u <= this.p ? 1 : 0;
        }

        /**
         * Generates Bernoulli distributed numbers
         * @param n: number - Number of elements in resulting array, n > 0
         * @returns Array<number> - Bernoulli distributed numbers
         */

    }, {
        key: 'distribution',
        value: function distribution(n) {
            var bernoulliArray = [],
                random = _prngProxy2.default.random(n);
            for (var i = 0; i < n; i += 1) {
                bernoulliArray[i] = this._random(random[i]);
            }
            return bernoulliArray;
        }

        /**
         * Error handling
         * For this distribution parameter "p" must be 0 <= p <= 1
         * @returns {boolean}
         */

    }, {
        key: 'isError',
        value: function isError() {
            if (!this.p && this.p !== 0) {
                return { error: 'Bernoulli distribution: you should point "p" numerical value' };
            }

            if (this.p < 0 || this.p > 1) {
                return { error: 'Bernoulli distribution: Parameter "p" must be from 0 to 1 inclusive' };
            }
            return { error: false };
        }

        /**
         * Refresh method
         * @param newP: number - new parameter "p"
         * This method does not return values
         */

    }, {
        key: 'refresh',
        value: function refresh(newP) {
            this.p = Number(newP);
        }

        /**
         * Class .toString method
         * @returns {string}
         */

    }, {
        key: 'toString',
        value: function toString() {
            var info = ['Bernoulli Distribution', 'Usage: unirand.bernoulli(' + this.p + ').random()'];
            return info.join('\n');
        }

        /**
         * Mean value
         * Information only
         * For calculating real mean value use analyzer
         */

    }, {
        key: 'mean',
        get: function get() {
            return this.p;
        }

        /**
         * Median value
         * Information only
         * For calculating real median value use analyzer
         */

    }, {
        key: 'median',
        get: function get() {
            if (this.p < 1 - this.p) {
                return 0;
            } else if (this.p === 0.5) {
                return 0.5;
            } else {
                return 1;
            }
        }

        /**
         * Variance value
         * Information only
         * For calculating real variance value use analyzer
         */

    }, {
        key: 'variance',
        get: function get() {
            return this.p * (1 - this.p);
        }

        /**
         * Skewness value
         * Information only
         * For calculating real skewness value use analyzer
         */

    }, {
        key: 'skewness',
        get: function get() {
            return (1 - 2 * this.p) / Math.sqrt(this.p * (1 - this.p));
        }

        /**
         * Entropy value
         * Information only
         * For calculating real entropy value use analyzer
         */

    }, {
        key: 'entropy',
        get: function get() {
            return -1 * (Math.log(1 - this.p) * (1 - this.p) + Math.log(this.p) * this.p);
        }

        /**
         * Fisher information
         * Information only
         */

    }, {
        key: 'fisher',
        get: function get() {
            return 1 / (this.p * (1 - this.p));
        }

        /**
         * All parameters of distribution in one object
         * Information only
         */

    }, {
        key: 'parameters',
        get: function get() {
            return {
                mean: this.mean,
                median: this.median,
                variance: this.variance,
                skewness: this.skewness,
                entropy: this.entropy,
                fisher: this.fisher
            };
        }
    }]);

    return Bernoulli;
}();

module.exports = Bernoulli;