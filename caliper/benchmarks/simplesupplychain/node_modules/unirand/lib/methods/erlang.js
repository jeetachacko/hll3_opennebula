'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

/**
 * Erlang Distribution
 * This is continuous distribution
 * https://en.wikipedia.org/wiki/Erlang_distribution
 * @param mu: number - mu > 0 - scale, "mu" can be double
 * @param k: number - shape parameter k must be a positive integer
 * @returns Erlang Distributed value
 * Created by Alexey S. Kiselev
 */

var _prngProxy = require('../prng/prngProxy');

var _prngProxy2 = _interopRequireDefault(_prngProxy);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Utils = require('../utils/utils');

var Erlang = function () {
    function Erlang(k, mu) {
        _classCallCheck(this, Erlang);

        this.shape = Number(k);
        this.scale = Number(mu);
    }

    /**
     * Generates a random number
     * @returns a Erlang distributed number
     */


    _createClass(Erlang, [{
        key: 'random',
        value: function random() {
            var p = 1,
                random = _prngProxy2.default.random(this.shape);
            for (var i = 0; i < this.shape; i += 1) {
                p *= random[i];
            }
            return -this.scale * Math.log(p);
        }

        /**
         * Generates next seeded random number
         * @returns {number}
         */

    }, {
        key: 'next',
        value: function next() {
            var p = 1;
            for (var i = 0; i < this.shape; i += 1) {
                p *= _prngProxy2.default.next();
            }
            return -this.scale * Math.log(p);
        }

        /**
         * Generates Erlang distributed numbers
         * @param n: number - Number of elements in resulting array, n > 0
         * @returns Array<number> - Erlang distributed numbers
         */

    }, {
        key: 'distribution',
        value: function distribution(n) {
            var erlangArray = [],
                p = void 0,
                random = _prngProxy2.default.random(n * this.shape);
            for (var i = 0; i < n; i += 1) {
                p = 1;
                for (var k = 0; k < this.shape; k += 1) {
                    p *= random[i * this.shape + k];
                }
                erlangArray[i] = -this.scale * Math.log(p);
            }
            return erlangArray;
        }

        /**
         * Error handling
         * Parameter "k" must be positive integer
         * Parameter "mu" must be positive
         * @returns {boolean}
         */

    }, {
        key: 'isError',
        value: function isError() {
            if (!this.scale || !this.shape) {
                return { error: 'Erlang distribution: you should point "mu" and "k" positive numerical values' };
            }
            if (this.shape <= 0) {
                return { error: 'Erlang distribution: parameter "k" must be a positive integer' };
            }
            if (this.scale <= 0) {
                return { error: 'Erlang distribution: parameter "mu" must be positive' };
            }
            return { error: false };
        }

        /**
         * Refresh method
         * @param newK: number - new parameter "k"
         * @param newMu: number - new parameter "mu"
         * This method does not return values
         */

    }, {
        key: 'refresh',
        value: function refresh(newK, newMu) {
            this.shape = Number(newK);
            this.scale = Number(newMu);
        }

        /**
         * Class .toString method
         * @returns {string}
         */

    }, {
        key: 'toString',
        value: function toString() {
            var info = ['Erlang Distribution', 'Usage: unirand.erlang(' + this.shape + ', ' + this.scale + ').random()'];
            return info.join('\n');
        }

        /**
         * Mean value
         * Information only
         * For calculating real mean value use analyzer
         */

    }, {
        key: 'mean',
        get: function get() {
            return this.shape * this.scale;
        }

        /**
         * Erlang distribution doesn't have simple close form of Median value
         */

        /**
         * Mode value - value, which appears most often
         * Information only
         * For calculating real mode value use analyzer
         */

    }, {
        key: 'mode',
        get: function get() {
            return this.scale * (this.shape - 1);
        }

        /**
         * Variance value
         * Information only
         * For calculating real variance value use analyzer
         */

    }, {
        key: 'variance',
        get: function get() {
            return this.shape * Math.pow(this.scale, 2);
        }

        /**
         * Skewness value
         * Information only
         * For calculating real skewness value use analyzer
         */

    }, {
        key: 'skewness',
        get: function get() {
            return 2 / Math.sqrt(this.shape);
        }

        /**
         * Entropy value
         * Information only
         * For calculating real entropy value use analyzer
         */

    }, {
        key: 'entropy',
        get: function get() {
            return (1 - this.shape) * Utils.digamma(this.shape) + Math.log(Utils.gamma(this.shape) * this.scale) + this.scale;
        }

        /**
         * Kurtosis value
         * Information only
         * For calculating real kurtosis value use analyzer
         */

    }, {
        key: 'kurtosis',
        get: function get() {
            return 6 / this.shape;
        }

        /**
         * All parameters of distribution in one object
         * Information only
         */

    }, {
        key: 'parameters',
        get: function get() {
            return {
                mean: this.mean,
                mode: this.mode,
                variance: this.variance,
                skewness: this.skewness,
                entropy: this.entropy,
                kurtosis: this.kurtosis
            };
        }
    }]);

    return Erlang;
}();

module.exports = Erlang;