'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

/**
 * Triangular distribution
 * This is continuous distribution
 * https://en.wikipedia.org/wiki/Triangular_distribution
 * @param a <number> - any number
 * @param b <number> - b > a
 * @param c <number> - a <= c <= b
 * @returns Triangular distributed value
 * Created by Alexey S. Kiselev
 */

var _prngProxy = require('../prng/prngProxy');

var _prngProxy2 = _interopRequireDefault(_prngProxy);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Triangular = function () {
    function Triangular(a, b, c) {
        _classCallCheck(this, Triangular);

        this.a = Number(a);
        this.b = Number(b);
        this.c = Number(c);
    }

    /**
     * Generates a random number
     * @returns a Triangular distributed number
     */


    _createClass(Triangular, [{
        key: 'random',
        value: function random() {
            var u = _prngProxy2.default.random();
            return this._random(u);
        }

        /**
         * Generates next seeded random number
         * @returns {number}
         */

    }, {
        key: 'next',
        value: function next() {
            return this._random(_prngProxy2.default.next());
        }

        /**
         * For simplicity
         * @param {number} u
         * @private
         */

    }, {
        key: '_random',
        value: function _random(u) {
            if (u <= (this.c - this.a) / (this.b - this.a)) {
                return this.a + Math.sqrt(u * (this.c - this.a) * (this.b - this.a));
            } else {
                return this.b - Math.sqrt(u * (this.b - this.a) - this.c + this.a) * (this.b - this.c);
            }
        }

        /**
         * Generates Triangular distributed numbers
         * @param n: number - Number of elements in resulting array, n > 0
         * @returns Array<number> - Triangular distributed numbers
         */

    }, {
        key: 'distribution',
        value: function distribution(n) {
            var triangularArray = [],
                random = _prngProxy2.default.random(n);
            for (var i = 0; i < n; i += 1) {
                triangularArray[i] = this._random(random[i]);
            }
            return triangularArray;
        }

        /**
         * Error handling
         * @returns {boolean}
         */

    }, {
        key: 'isError',
        value: function isError() {
            if (!this.a && this.a !== 0 || !this.b && this.b !== 0 || !this.c && this.c !== 0) {
                return { error: 'Triangular distribution: you should point "a", "b" and "c" numerical values' };
            }
            if (this.b <= this.a) {
                return { error: 'Triangular distribution: parameters "b" must be greater then parameter "a"' };
            }

            if (this.c < this.a || this.c > this.b) {
                return { error: 'Triangular distribution: parameters "c" must be greater then or equal to parameter "a" and lower then or equal to parameter "b"' };
            }
            return { error: false };
        }

        /**
         * Refresh method
         * @param newA: number - new parameter "a"
         * @param newB: number - new parameter "b"
         * @param newC: number - new parameter "c"
         * This method does not return values
         */

    }, {
        key: 'refresh',
        value: function refresh(newA, newB, newC) {
            this.a = Number(newA);
            this.b = Number(newB);
            this.c = Number(newC);
        }

        /**
         * Class .toString method
         * @returns {string}
         */

    }, {
        key: 'toString',
        value: function toString() {
            var info = ['Triangular Distribution', 'Usage: unirand.triangular(' + this.a + ', ' + this.b + ', ' + this.c + ').random()'];
            return info.join('\n');
        }

        /**
         * Mean value
         * Information only
         * For calculating real mean value use analyzer
         */

    }, {
        key: 'mean',
        get: function get() {
            return (this.a + this.b + this.c) / 3;
        }

        /**
         * Median value
         * Information only
         * For calculating real median value use analyzer
         */

    }, {
        key: 'median',
        get: function get() {
            if (this.c >= 0.5 * (this.a + this.b)) {
                return this.a + Math.sqrt((this.b - this.a) * (this.c - this.a) / 2);
            } else {
                return this.b - Math.sqrt((this.b - this.a) * (this.b - this.c) / 2);
            }
        }

        /**
         * Mode value - value, which appears most often
         * Information only
         * For calculating real mode value use analyzer
         */

    }, {
        key: 'mode',
        get: function get() {
            return this.c;
        }

        /**
         * Variance value
         * Information only
         * For calculating real variance value use analyzer
         */

    }, {
        key: 'variance',
        get: function get() {
            return (Math.pow(this.a, 2) + Math.pow(this.b, 2) + Math.pow(this.c, 2) - this.a * this.b - this.a * this.c - this.b * this.c) / 18;
        }

        /**
         * Skewness value
         * Information only
         * For calculating real skewness value use analyzer
         */

    }, {
        key: 'skewness',
        get: function get() {
            return Math.sqrt(2) * (this.a + this.b - 2 * this.c) * (2 * this.a - this.b - this.c) * (this.a + this.c - 2 * this.b) / (5 * Math.pow(18 * this.variance, 1.5));
        }

        /**
         * Entropy value
         * Information only
         * For calculating real entropy value use analyzer
         */

    }, {
        key: 'entropy',
        get: function get() {
            return 0.5 + Math.log((this.b - this.a) / 2);
        }

        /**
         * Kurtosis value
         * Information only
         */

    }, {
        key: 'kurtosis',
        get: function get() {
            return -3 / 5;
        }

        /**
         * All parameters of distribution in one object
         * Information only
         */

    }, {
        key: 'parameters',
        get: function get() {
            return {
                mean: this.mean,
                median: this.median,
                mode: this.mode,
                variance: this.variance,
                entropy: this.entropy,
                skewness: this.skewness
            };
        }
    }]);

    return Triangular;
}();

module.exports = Triangular;