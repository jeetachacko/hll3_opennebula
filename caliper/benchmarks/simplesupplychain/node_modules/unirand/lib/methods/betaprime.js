'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Beta Distribution
 * This is continuous distribution
 * https://en.wikipedia.org/wiki/Beta_prime_distribution
 * @param alpha: number - alpha > 0, alpha must be integer
 * @param beta: number - beta > 0, beta must be integer
 * @returns Beta Prime Distributed value
 * Created by Alexey S. Kiselev
 */

var Beta = require('./beta');

var BetaPrime = function () {
    function BetaPrime(alpha, beta) {
        _classCallCheck(this, BetaPrime);

        this.alpha = Number(alpha);
        this.beta = Number(beta);
        this.betaRandom = new Beta(this.alpha, this.beta);
    }

    /**
     * Generates a random number
     * Use Beta distribution for calculation
     * Refresh Beta before calculating
     * @returns a Beta Prime distributed number
     */


    _createClass(BetaPrime, [{
        key: 'random',
        value: function random() {
            var betaVariance = void 0;
            this.betaRandom.refresh(this.alpha, this.beta);
            betaVariance = this.betaRandom.random();

            return betaVariance / (1 - betaVariance);
        }

        /**
         * Generates next seeded random number
         * @returns {number}
         */

    }, {
        key: 'next',
        value: function next() {
            var betaVariance = void 0;
            this.betaRandom.refresh(this.alpha, this.beta);
            betaVariance = this.betaRandom.next();

            return betaVariance / (1 - betaVariance);
        }

        /**
         * Generates Beta Prime distributed numbers
         * @param n: number - Number of elements in resulting array, n > 0
         * @returns Array<number> - Beta Prime distributed numbers
         */

    }, {
        key: 'distribution',
        value: function distribution(n) {
            this.betaRandom.refresh(this.alpha, this.beta);
            var betaPrimeArray = [],
                betaVariance = this.betaRandom.distribution(n);
            for (var i = 0; i < n; i += 1) {
                betaPrimeArray[i] = betaVariance[i] / (1 - betaVariance[i]);
            }
            return betaPrimeArray;
        }

        /**
         * Error handling
         * Parameter "alpha" must be positive
         * Parameter "beta" must be positive
         * @returns {boolean}
         */

    }, {
        key: 'isError',
        value: function isError() {
            if (!this.alpha || !this.beta) {
                return { error: 'Beta Prime distribution: you should point "alpha" and "beta" positive numerical values' };
            }
            if (this.alpha <= 0) {
                return { error: 'Beta Prime distribution: Parameter "alpha" must be positive' };
            }
            if (this.beta <= 0) {
                return { error: 'Beta Prime distribution: Parameter "beta" must be positive' };
            }
            return { error: false };
        }

        /**
         * Refresh method
         * @param newAlpha: number - new parameter "alpha"
         * @param newBeta: number - new parameter "beta"
         * This method does not return values
         */

    }, {
        key: 'refresh',
        value: function refresh(newAlpha, newBeta) {
            this.alpha = Number(newAlpha);
            this.beta = Number(newBeta);
        }

        /**
         * Class .toString method
         * @returns {string}
         */

    }, {
        key: 'toString',
        value: function toString() {
            var info = ['Beta Prime Distribution', 'Usage: unirand.betaprime(' + this.alpha + ', ' + this.beta + ').random()'];
            return info.join('\n');
        }

        /**
         * Mean value
         * Information only
         * For calculating real mean value use analyzer
         */

    }, {
        key: 'mean',
        get: function get() {
            if (this.beta > 1) {
                return this.alpha / (this.beta - 1);
            }
            return Infinity;
        }

        /**
         * Mode value
         * Information only
         * For calculating real mean value use analyzer
         */

    }, {
        key: 'mode',
        get: function get() {
            if (this.alpha >= 1) {
                return (this.alpha - 1) / (this.beta + 1);
            }
            return 0;
        }

        /**
         * Variance value
         * Information only
         * For calculating real variance value use analyzer
         */

    }, {
        key: 'variance',
        get: function get() {
            if (this.beta > 2) {
                return this.alpha * (this.alpha + this.beta - 1) / ((this.beta - 1) * (this.beta - 1) * (this.beta - 2));
            }
        }

        /**
         * All parameters of distribution in one object
         * Information only
         */

    }, {
        key: 'parameters',
        get: function get() {
            return {
                mean: this.mean,
                mode: this.mode,
                variance: this.variance
            };
        }
    }]);

    return BetaPrime;
}();

module.exports = BetaPrime;